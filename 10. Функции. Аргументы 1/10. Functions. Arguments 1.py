# Допустим, ваша компания каждый месяц выделяет некоторую сумму денег 
# на подарки сотрудникам ко дню рождения. Каждый месяц эта сумма разная. 
# Также у вас есть список дней рождения сотрудников. 
# Вам нужно написать удобный инструмент для того, 
# чтобы сотрудники могли понять, сколько денег им ждать на день рождения, 
# если известно, какой бюджет выделяется на месяц и для какого месяца производится подсчет.
# Для этого напишите функцию gift_count, которая будет принимать:

# бюджет, который выделяется компанией на месяц
# номер месяца, на который нужно произвести расчет
# словарь, где ключи - это имена сотрудников, 
# а значения - datetime.date с датой рождения сотрудника.
# Функция должна вывести на экран фразу 
# (цифры должны быть подставлены в соответствии со значениями аргументов):

# Именинники в месяце 5: Иванов Иван Иванович (01.05.1989), 
# Петров Петр Петрович (06.05.1998). При бюджете 20000 они получат по 10000 рублей.
# Если в ответе получается не целое число, округлите его до меньшего целого. 
# Именинники должны быть выведены в порядке дня рождения 
# по возрастанию (не полной даты рождения, а именно дня). 
# Если в выбранном месяце нет именинников, должна быть выведена строка "В этом месяце нет именниннков."

# Формат ввода
# birthdays = {"Иванов Иван Иванович": datetime.date(1989, 5, 1), "Петров Петр Петрович": datetime.date(1998, 5, 6)}

# gift_count(20000, 5, birthdays)

# gift_count(budget=20000, month=5, birthdays=birthdays)

# Формат вывода
# Именинники в месяце 5: Иванов Иван Иванович (01.05.1989), 
# Петров Петр Петрович (06.05.1998). 
# При бюджете 20000 они получат по 10000 рублей.

# Примечания
# В примере формата ввода показаны несколько вариантов вызова функции gift_count: 
# с порядковыми аргументами и с передачей их по имени.
# Соответственно, аргументы функции должны называться так же,
# как они используются в примере.

import datetime
from collections import defaultdict

actual_birthdays = defaultdict()

def output(month, money, budget, sort_birthdays):
    txt = "Именинники в месяце " + str(month) + ":"
    
    for para in sort_birthdays:
        if para == sort_birthdays[-1:][0]:
            txt += " " + para[0] + " (" + datetime.datetime.strftime(para[1], "%d.%m.%Y") + ")."
        else:
            txt += " " + para[0] + " (" + datetime.datetime.strftime(para[1], "%d.%m.%Y") + "),"
    
    txt += " При бюджете " + str(budget) + " они получат по " + str(money) + " рублей."
    
    return txt
    
def gift_count(budget, month, birthdays):    
    for key, value in birthdays.items():
        if(value.month == month):
            actual_birthdays[key] = value
            
    if not actual_birthdays: 
        print("В этом месяце нет именниннков.")
    else:
        sort_birthdays = sorted(actual_birthdays.items(), key = lambda para: para[1].day)
        money = int(budget/len(sort_birthdays))
                         
        print(output(month, money, budget, sort_birthdays))
        
    actual_birthdays.clear()   

# тест
birthdays = {
             "Катя": datetime.date(1989, 1, 1), 
             "Ваня": datetime.date(1971, 1, 6),
             "Рахимджон" : datetime.date(1965, 5, 6),
             "Орзухон" : datetime.date(1999, 5, 25),
             "Галя" : datetime.date(1971, 5, 30),
            }               

birthdays_2 = {
               "Иванов Иван Иванович": datetime.date(1989, 5, 1), 
               "Петров Петр Петрович": datetime.date(1998, 5, 6)
              } 
         
gift_count(3000, 1, birthdays)

gift_count(20000, 5, birthdays_2)
        
        
    


              















































